// <auto-generated />
using System;
using LineList.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebAppMVCSqlite.Migrations
{
    [DbContext(typeof(LineListContext))]
    [Migration("20230702191108_City")]
    partial class City
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("LineList.Models.DboAddress", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<string>("City")
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("FullAddress")
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("Province")
                        .HasColumnType("NVARCHAR(1000)");

                    b.HasKey("AddressId");

                    b.ToTable("dbo.Address", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboHospital", b =>
                {
                    b.Property<long>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HospitalID");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR (1000)");

                    b.HasKey("HospitalId");

                    b.ToTable("dbo.Hospital", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboLabSample", b =>
                {
                    b.Property<long>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SampleID");

                    b.Property<long?>("AnswerDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LabId")
                        .HasColumnType("INTEGER (1000)")
                        .HasColumnName("LabID");

                    b.Property<string>("SamplingDate")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("TestAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToLabDate")
                        .HasColumnType("NVARCHAR (1000)");

                    b.HasKey("SampleId");

                    b.HasIndex("LabId");

                    b.ToTable("dbo.LabSample", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboLabSource", b =>
                {
                    b.Property<long>("LabSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LabSourceID");

                    b.Property<string>("LabName")
                        .HasColumnType("NVARCHAR (1000)");

                    b.HasKey("LabSourceId");

                    b.ToTable("dbo.LabSource", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboPatient", b =>
                {
                    b.Property<long>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PatientID");

                    b.Property<long?>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("FatherName")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("FirstName")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("Gender")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("Job")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("LabSampleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LabSampleID");

                    b.Property<string>("LastName")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("PatientStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PatientStatusID");

                    b.Property<long?>("VaccineSituationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineSituationID");

                    b.HasKey("PatientId");

                    b.HasIndex("AddressId");

                    b.HasIndex("LabSampleId");

                    b.HasIndex("PatientStatusId");

                    b.HasIndex("VaccineSituationId");

                    b.ToTable("dbo.Patient", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboPatientStatus", b =>
                {
                    b.Property<long>("PatientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PatientStatusID");

                    b.Property<long?>("AdmissionType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HistoryOfCovid")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HospitalID");

                    b.Property<string>("HospitalInDate")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("HospitalOutDate")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("HospitalSection")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("IsPregnant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SymptomsDate")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("UnderlyingDiseas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnderlyingDiseasName")
                        .HasColumnType("NVARCHAR (1000)");

                    b.HasKey("PatientStatusId");

                    b.HasIndex("HospitalId");

                    b.ToTable("dbo.PatientStatus", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboSysdiagram", b =>
                {
                    b.Property<byte[]>("Definition")
                        .HasColumnType("BLOB")
                        .HasColumnName("definition");

                    b.Property<byte[]>("DiagramId")
                        .HasColumnType("BLOB")
                        .HasColumnName("diagram_id");

                    b.Property<byte[]>("Name")
                        .HasColumnType("BLOB")
                        .HasColumnName("name");

                    b.Property<byte[]>("PrincipalId")
                        .HasColumnType("BLOB")
                        .HasColumnName("principal_id");

                    b.Property<byte[]>("Version")
                        .HasColumnType("BLOB")
                        .HasColumnName("version");

                    b.ToTable("dbo.sysdiagrams", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboVaccineSituation", b =>
                {
                    b.Property<long>("VaccineSituationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineSituationID");

                    b.Property<byte[]>("Check")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Date")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("Time")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<string>("Type")
                        .HasColumnType("NVARCHAR (1000)");

                    b.Property<long?>("VaccineSourceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineSourceID");

                    b.HasKey("VaccineSituationId");

                    b.HasIndex("VaccineSourceId");

                    b.ToTable("dbo.VaccineSituation", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboVaccineSource", b =>
                {
                    b.Property<long>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VaccineID");

                    b.Property<string>("Type")
                        .HasColumnType("NVARCHAR (1000)");

                    b.HasKey("VaccineId");

                    b.ToTable("dbo.VaccineSource", (string)null);
                });

            modelBuilder.Entity("LineList.Models.DboLabSample", b =>
                {
                    b.HasOne("LineList.Models.DboLabSample", "Lab")
                        .WithMany("InverseLab")
                        .HasForeignKey("LabId");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("LineList.Models.DboPatient", b =>
                {
                    b.HasOne("LineList.Models.DboAddress", "Address")
                        .WithMany("DboPatients")
                        .HasForeignKey("AddressId");

                    b.HasOne("LineList.Models.DboLabSample", "LabSample")
                        .WithMany("DboPatients")
                        .HasForeignKey("LabSampleId");

                    b.HasOne("LineList.Models.DboPatientStatus", "PatientStatus")
                        .WithMany("DboPatients")
                        .HasForeignKey("PatientStatusId");

                    b.HasOne("LineList.Models.DboVaccineSituation", "VaccineSituation")
                        .WithMany("DboPatients")
                        .HasForeignKey("VaccineSituationId");

                    b.Navigation("Address");

                    b.Navigation("LabSample");

                    b.Navigation("PatientStatus");

                    b.Navigation("VaccineSituation");
                });

            modelBuilder.Entity("LineList.Models.DboPatientStatus", b =>
                {
                    b.HasOne("LineList.Models.DboHospital", "Hospital")
                        .WithMany("DboPatientStatuses")
                        .HasForeignKey("HospitalId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("LineList.Models.DboVaccineSituation", b =>
                {
                    b.HasOne("LineList.Models.DboVaccineSource", "VaccineSource")
                        .WithMany("DboVaccineSituations")
                        .HasForeignKey("VaccineSourceId");

                    b.Navigation("VaccineSource");
                });

            modelBuilder.Entity("LineList.Models.DboAddress", b =>
                {
                    b.Navigation("DboPatients");
                });

            modelBuilder.Entity("LineList.Models.DboHospital", b =>
                {
                    b.Navigation("DboPatientStatuses");
                });

            modelBuilder.Entity("LineList.Models.DboLabSample", b =>
                {
                    b.Navigation("DboPatients");

                    b.Navigation("InverseLab");
                });

            modelBuilder.Entity("LineList.Models.DboPatientStatus", b =>
                {
                    b.Navigation("DboPatients");
                });

            modelBuilder.Entity("LineList.Models.DboVaccineSituation", b =>
                {
                    b.Navigation("DboPatients");
                });

            modelBuilder.Entity("LineList.Models.DboVaccineSource", b =>
                {
                    b.Navigation("DboVaccineSituations");
                });
#pragma warning restore 612, 618
        }
    }
}
